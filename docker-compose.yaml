services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stock_app_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-stock_app}
      POSTGRES_USER: ${POSTGRES_USER:-adminUser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-qwe123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/backend/schema.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-adminUser} -d ${POSTGRES_DB:-stock_app}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Python Backend
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile.backend
    container_name: stock_app_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-adminUser}:${POSTGRES_PASSWORD:-qwe123}@postgres:5432/${POSTGRES_DB:-stock_app}
      - PYTHONPATH=/app
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
    volumes:
      - ./src/backend:/app
      - /app/__pycache__
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    develop:
      watch:
        - action: sync
          path: ./src/backend
          target: /app
          ignore:
            - __pycache__/
            - "*.pyc"

  # Stock Data Scheduler
  scheduler:
    build:
      context: ./src/backend
      dockerfile: Dockerfile.backend
    container_name: stock_app_scheduler
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-adminUser}:${POSTGRES_PASSWORD:-qwe123}@postgres:5432/${POSTGRES_DB:-stock_app}
      - PYTHONPATH=/app
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
    volumes:
      - ./src/backend:/app
      - scheduler_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    command: ["python", "scheduler.py"]
    healthcheck:
      test: ["CMD", "python", "-c", "import os; exit(0 if os.path.exists('/app/scheduler.log') else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./src/app
      dockerfile: Dockerfile.frontend
    container_name: stock_app_frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - PYTHON_BACKEND_URL=http://backend:8000
      - NODE_ENV=development
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network
    develop:
      watch:
        - action: sync
          path: .
          target: /app
          ignore:
            - node_modules/
            - .next/
            - .git/

volumes:
  postgres_data:
  scheduler_logs:

networks:
  app-network:
    driver: bridge